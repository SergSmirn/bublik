import {Telegraf, Context} from "telegraf";
import {connect} from "mongoose";
import UserModel, {getUserDisplayName, UserSchema} from "./models/user";
import {Chat} from "typegram";
import PrivateChat = Chat.PrivateChat;
import {notifyAll} from "./helpers/notifyAll";
import {getRandomInRange} from "./helpers/getRandomInRange";
import {privateChatMiddleware} from "./middlewares/privateChatMiddleware";
import {session} from "telegraf-session-mongodb";
import * as dotenv from "dotenv";

dotenv.config();

export interface SessionContext extends Context {
    session: any;
}

enum Commands {
    WishList,
    SendToRecipient,
    SendToSanta,
}

const BOT_TOKEN = process.env.BOT_TOKEN || '';
const DATABASE_URL = process.env.DATABASE_URL || 'mongodb://localhost:27017/node-mongodb-server';
const ADMIN_USERNAMES = ['SergSmirn'];
const bot = new Telegraf<SessionContext>(BOT_TOKEN);

connect(DATABASE_URL).then((client) => {
    const db = client.connection.db;
    bot.use(session(db, { sessionName: 'session', collectionName: 'sessions' }));

    bot.start(async (ctx: SessionContext) => {
        if (ctx?.chat?.type === 'private') {
            const chatInfo = ctx.chat;
            const alreadyExists = await UserModel.exists({id: chatInfo.id});

            if (!alreadyExists) {
                const newUser = await UserModel.create({id: chatInfo.id, name: chatInfo.first_name, surname: chatInfo.last_name, username: chatInfo.username});
                await notifyAll(ctx, newUser);
            }
        }
        ctx.session.currentCommand = Commands.WishList;

        await ctx.reply('–•–∞–π, –±—Ä–∞—É–Ω–∏ ü§ô');
        await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /getmembers, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–≥—Ä—ã');

        if (ctx?.chat?.type === 'private') {
            await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /setwishlist, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è');
            await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /takerecipient, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–º—É —Ç—ã –±—É–¥–µ—à—å –¥–∞—Ä–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫. –ù–æ –Ω–µ —Å–ø–µ—à–∏, –ø–æ–¥–æ–∂–¥–∏ –ø–æ–∫–∞ –≤—Å–µ –ø–æ–¥—Ä—É–∂–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—Å—è –∫ –∏–≥—Ä–µ');
        }
    });

    bot.command('getmembers',async (ctx: SessionContext) => {
        const users = await UserModel.find();
        const text = '–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n' + users.map((user: UserSchema, index) => `${index + 1}. ${getUserDisplayName(user)}${user.wishList ? ' üìÉ' : ''}${user.recipientId ? ' üéÖ' : ''}`).join('\n');
        ctx.reply(text);
    });

    bot.use(privateChatMiddleware).command('resetdata',async (ctx: SessionContext) => {
        const chat = ctx?.chat as PrivateChat;

        if (chat.username && ADMIN_USERNAMES.includes(chat.username)) {
            await UserModel.deleteMany();
            ctx.reply('–ë–î –æ—á–∏—â–µ–Ω–∞');
        }
    });

    bot.use(privateChatMiddleware).command('setwishlist',async (ctx: SessionContext) => {
        ctx.session.currentCommand = Commands.WishList;
        ctx.reply('–ù–∞–ø–∏—à–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å, –∞ —á—Ç–æ –Ω–µ—Ç');
    });

    bot.use(privateChatMiddleware).command('sendtorecipient',async (ctx: SessionContext) => {
        ctx.session.currentCommand = Commands.SendToRecipient;
        ctx.reply('–ù–∞–ø–∏—à–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–¥–∞—Ç—å —Å–≤–æ–µ–π –ø–æ–¥—Ä—É–∂–∫–µ');
    });

    bot.use(privateChatMiddleware).command('sendtosanta',async (ctx: SessionContext) => {
        ctx.session.currentCommand = Commands.SendToSanta;
        ctx.reply('–ù–∞–ø–∏—à–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–¥–∞—Ç—å —Å–≤–æ–µ–º—É —Å–∞–Ω—Ç–µ');
    });

    bot.use(privateChatMiddleware).command('takerecipient',async (ctx: SessionContext) => {
        const chatInfo = ctx.chat as PrivateChat;
        const contextUser = await UserModel.findOne({id: chatInfo.id});

        if (contextUser) {
            if (contextUser.recipientId) {
                return ctx.reply('–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ø–∞—Ä–∞');
            }

            const allRecipients: UserSchema[] = await UserModel.find({santaId: null}).where('id').ne(contextUser.id);
            const noSantaRecipients = allRecipients.filter(({recipientId}) => !recipientId);
            const santaRecipients = allRecipients.filter(({recipientId}) => recipientId);
            const recipients = noSantaRecipients.length ? noSantaRecipients : santaRecipients;
            const recipient: UserSchema | undefined = recipients[getRandomInRange(recipients.length - 1)];

            if (!recipient) {
                return ctx.reply('–£–ø—Å! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑');
            }

            try {
                await UserModel.findOneAndUpdate({id: recipient.id, santaId: null}, {santaId: contextUser.id});
            } catch (_e) {
                return ctx.reply('–£–ø—Å! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑');
            }

            await contextUser.updateOne({recipientId: recipient.id});
            await ctx.reply(`–Ø –ø–æ–¥–æ–±—Ä–∞–ª –¥–ª—è —Ç–µ–±—è –ø–∞—Ä—É, –∏ —ç—Ç–æ - ${getUserDisplayName(recipient)} üéâüéâüéâ`);
            const wishText = recipient.wishList ? '<b>–ü–æ–∂–µ–ª–∞–Ω–∏—è —Ç–≤–æ–µ–π –ø–æ–¥—Ä—É–∂–∫–∏ üíÅ‚Äç‚ôÄÔ∏è:\n</b>' + recipient.wishList : '–¢–≤–æ—è –ø–æ–¥—Ä—É–∂–∫–∞ –Ω–µ —É–∫–∞–∑–∞–ª–∞, —á—Ç–æ —Ö–æ—á–µ—Ç';
            await ctx.replyWithHTML(wishText);
        }
    });

    bot.hears(/–≤–∏–æ–ª–µ—Ç/gi, ctx => {
        ctx.replyWithPhoto({source: 'images/kiril.jpg'});
    })

    bot.use(privateChatMiddleware).on('text', async (ctx: SessionContext) => {
        const chatInfo = ctx.chat as PrivateChat;
        const currentCommand = ctx.session.currentCommand;

        if (currentCommand === Commands.WishList) {
            // @ts-ignore
            const wishText: string | undefined = ctx.message.text;
            const currentUser = await UserModel.findOne({id: chatInfo.id});

            if (currentUser && wishText) {
                await currentUser.updateOne({wishList: wishText});
                await ctx.reply('–ù—É –ø–∏–Ω—Ü–µ—Ç! –¢–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –±—É–¥—É—Ç —É—á—Ç–µ–Ω—ã, –Ω–∞–≤–µ—Ä–Ω–æ–µ...');

                if (currentUser.santaId) {
                    await ctx.telegram.sendMessage(currentUser.santaId, '–¢–≤–æ–π –±—Ä–∞—É–Ω–∏ –∏–∑–º–µ–Ω–∏–ª —Å–ø–∏—Å–æ–∫ –ø–æ–∂–µ–ª–∞–Ω–∏–π');
                    await ctx.telegram.sendMessage(currentUser.santaId, wishText);
                }
            } else {
                ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :(');
            }

            ctx.session.currentCommand = null;
        }

        if (currentCommand === Commands.SendToRecipient) {
            // @ts-ignore
            const messageText: string | undefined = ctx.message.text;
            const currentUser = await UserModel.findOne({id: chatInfo.id});

            if (currentUser && messageText) {
                if (currentUser.recipientId) {
                    await ctx.telegram.sendMessage(currentUser.recipientId, '–¢–≤–æ–π —Å–∞–Ω—Ç–∞ —Ö–æ—á–µ—Ç —Ç–µ–±–µ —á—Ç–æ-—Ç–æ —Å–∫–∞–∑–∞—Ç—å');
                    await ctx.telegram.sendMessage(currentUser.recipientId, messageText);
                }

                await ctx.reply('–ü–µ—Ä–µ–¥–∞–ª —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ');
            } else {
                ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :(');
            }

            ctx.session.currentCommand = null;
        }

        if (currentCommand === Commands.SendToSanta) {
            // @ts-ignore
            const messageText: string | undefined = ctx.message.text;
            const currentUser = await UserModel.findOne({id: chatInfo.id});

            if (currentUser && messageText) {
                if (currentUser.santaId) {
                    await ctx.telegram.sendMessage(currentUser.santaId, '–¢–≤–æ–π –±—Ä–∞—É–Ω–∏ —Ö–æ—á–µ—Ç —Ç–µ–±–µ —á—Ç–æ-—Ç–æ —Å–∫–∞–∑–∞—Ç—å');
                    await ctx.telegram.sendMessage(currentUser.santaId, messageText);
                }

                await ctx.reply('–ü–µ—Ä–µ–¥–∞–ª —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ');
            } else {
                ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :(');
            }

            ctx.session.currentCommand = null;
        }
    })

    bot.launch();
});

